struct utf8str {
    char *
    size_t cap
    size_t size // in bytes (-1 has not calculated yet)
    size_t len // in runes (-1 has not calculated yet)
}
struct iterator {
    utf8str*
    char* ptr
    size_t pos // byte
    size_t sym // rune
}

1. Must have
str_new
str_free
str_dup
from_char*
to_char*
clear
str_cat - char & char*
str_capacity
is_valid - check if it contains valid utf
count - number of utf8 symbols
len - number of bytes used
delete - char, substring, and (from, to)
insert - substring and char
append - substring and char
at - utf8 symbol at position
upcase
lowcase
compare
compare_no_case
utf8width - for the object, char, char*
utf8width_first - first char of char*
substring
str_srch - cp, char & char*
starts_with
end_with
replace
trim
trim_right
trim_left
back - find the first byte of the symbol under pointer
last - go to last symbol
is_digit
is_whitespace
is_letter
is_letter_upcase
is_letter_lowcase
is_punct

2. Nice to have
str_char_iterator
str_word_iterator
reverse
upcase_first
lowcase_first
title_case
split/split_next(?)
scrub - replace invalid utf characters with placeholder
translate - tr/abc/def/
word_count
str_srch_right
repeat
chomp - remove the suffix

3. Maybe
justify - add spaces between words to make the string *width* if the string is longer than *limit*
center - add spaces from start and to end until *width* is reached
right_justify - add spaces to end until *width* is reached
left_justify - add spaces from start until *width* is reached
expand_tabs - convert tabs to spaces
squeeze - remove duplicate spaces
substr_count - number of occurances substr in string
